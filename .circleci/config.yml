version: 2.1

orbs:
  cypress: cypress-io/cypress@1

commands:
  dlreporter:
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter

jobs:
  jest:
    docker:
      - image: circleci/node:lts
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project/tmp
      - run: node --version
      - run: npm --version
      - run: yarn --version
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ~/project/tmp
      - dlreporter
      - run:
          name: Run Unit Tests
          command: |
            yarn test:ci
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json coverage/frontend/lcov.info
          environment:
            JEST_JUNIT_OUTPUT_DIR: 'reports/junit/js-test-results.xml'
      - store_artifacts:
          path: reports
      - store_test_results:
          path: reports/junit
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.frontend.json

  pytest:
    docker:
      - image: circleci/python:3.8
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:12
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_HOST_AUTH_METHOD: trust
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - run: python --version
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.8/site-packages"
      - dlreporter
      - run:
          command: |
            mkdir test-results
            pipenv run pytest --cov=accounts --cov=boards --cov-report html --junitxml=test-results/junit.xml
            ./tmp/cc-test-reporter -o tmp/codeclimate.backend.json
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  upload-coverage:
    docker:
      - image: circleci/node:lts
    environment:
      CC_TEST_REPORTER_ID: a19da03aeca04b61b6d65b92e0e8a412ebdaa13d6b2bd12a22cdf4a1e0ecc3fc
    working_directory: ~/project/tmp
    steps:
      - attach_workspace:
          at: ~/project/tmp
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter upload-coverage -i ./codeclimate.frontend.json

workflows:
  version: 2
  default:
    jobs:
      - jest
      - pytest
#      - cypress/install:
#          cache-key: v1-cypress-{{ arch }}-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
#          yarn: true
#          working_directory: frontend/
#      - cypress/run:
#          requires:
#            - cypress/install
#          cache-key: v1-cypress-{{ arch }}-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
#          no-workspace: true
#          yarn: true
#          working_directory: frontend
#          start: yarn start
#          wait-on: 'http://localhost:3000'
#          store_artifacts: true
      - upload-coverage:
          requires:
             - jest
             - pytest
